// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExecuterUnit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExecuterUnit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace info {

namespace {

const ::google::protobuf::Descriptor* ExecuterUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuterUnit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExecuterUnit_2eproto() {
  protobuf_AddDesc_ExecuterUnit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExecuterUnit.proto");
  GOOGLE_CHECK(file != NULL);
  ExecuterUnit_descriptor_ = file->message_type(0);
  static const int ExecuterUnit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, memorytotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, memoryremained_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, cputotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, cpuremaind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, codepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, ipaddress_),
  };
  ExecuterUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuterUnit_descriptor_,
      ExecuterUnit::default_instance_,
      ExecuterUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuterUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuterUnit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExecuterUnit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuterUnit_descriptor_, &ExecuterUnit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExecuterUnit_2eproto() {
  delete ExecuterUnit::default_instance_;
  delete ExecuterUnit_reflection_;
}

void protobuf_AddDesc_ExecuterUnit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ExecuterUnit.proto\022\004info\"\223\001\n\014ExecuterU"
    "nit\022\023\n\013MemoryTotal\030\001 \001(\005\022\026\n\016MemoryRemain"
    "ed\030\002 \001(\005\022\020\n\010CpuTotal\030\003 \001(\005\022\022\n\nCpuRemaind"
    "\030\004 \001(\005\022\013\n\003pid\030\005 \001(\005\022\020\n\010CodePath\030\006 \001(\t\022\021\n"
    "\tIpAddress\030\007 \001(\t", 176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExecuterUnit.proto", &protobuf_RegisterTypes);
  ExecuterUnit::default_instance_ = new ExecuterUnit();
  ExecuterUnit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExecuterUnit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExecuterUnit_2eproto {
  StaticDescriptorInitializer_ExecuterUnit_2eproto() {
    protobuf_AddDesc_ExecuterUnit_2eproto();
  }
} static_descriptor_initializer_ExecuterUnit_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExecuterUnit::kMemoryTotalFieldNumber;
const int ExecuterUnit::kMemoryRemainedFieldNumber;
const int ExecuterUnit::kCpuTotalFieldNumber;
const int ExecuterUnit::kCpuRemaindFieldNumber;
const int ExecuterUnit::kPidFieldNumber;
const int ExecuterUnit::kCodePathFieldNumber;
const int ExecuterUnit::kIpAddressFieldNumber;
#endif  // !_MSC_VER

ExecuterUnit::ExecuterUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:info.ExecuterUnit)
}

void ExecuterUnit::InitAsDefaultInstance() {
}

ExecuterUnit::ExecuterUnit(const ExecuterUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:info.ExecuterUnit)
}

void ExecuterUnit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memorytotal_ = 0;
  memoryremained_ = 0;
  cputotal_ = 0;
  cpuremaind_ = 0;
  pid_ = 0;
  codepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuterUnit::~ExecuterUnit() {
  // @@protoc_insertion_point(destructor:info.ExecuterUnit)
  SharedDtor();
}

void ExecuterUnit::SharedDtor() {
  if (codepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codepath_;
  }
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipaddress_;
  }
  if (this != default_instance_) {
  }
}

void ExecuterUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuterUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuterUnit_descriptor_;
}

const ExecuterUnit& ExecuterUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExecuterUnit_2eproto();
  return *default_instance_;
}

ExecuterUnit* ExecuterUnit::default_instance_ = NULL;

ExecuterUnit* ExecuterUnit::New() const {
  return new ExecuterUnit;
}

void ExecuterUnit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExecuterUnit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(memorytotal_, cpuremaind_);
    pid_ = 0;
    if (has_codepath()) {
      if (codepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codepath_->clear();
      }
    }
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipaddress_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuterUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:info.ExecuterUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MemoryTotal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memorytotal_)));
          set_has_memorytotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MemoryRemained;
        break;
      }

      // optional int32 MemoryRemained = 2;
      case 2: {
        if (tag == 16) {
         parse_MemoryRemained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memoryremained_)));
          set_has_memoryremained();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CpuTotal;
        break;
      }

      // optional int32 CpuTotal = 3;
      case 3: {
        if (tag == 24) {
         parse_CpuTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cputotal_)));
          set_has_cputotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CpuRemaind;
        break;
      }

      // optional int32 CpuRemaind = 4;
      case 4: {
        if (tag == 32) {
         parse_CpuRemaind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpuremaind_)));
          set_has_cpuremaind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional int32 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CodePath;
        break;
      }

      // optional string CodePath = 6;
      case 6: {
        if (tag == 50) {
         parse_CodePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codepath().data(), this->codepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_IpAddress;
        break;
      }

      // optional string IpAddress = 7;
      case 7: {
        if (tag == 58) {
         parse_IpAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:info.ExecuterUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:info.ExecuterUnit)
  return false;
#undef DO_
}

void ExecuterUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:info.ExecuterUnit)
  // optional int32 MemoryTotal = 1;
  if (has_memorytotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->memorytotal(), output);
  }

  // optional int32 MemoryRemained = 2;
  if (has_memoryremained()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->memoryremained(), output);
  }

  // optional int32 CpuTotal = 3;
  if (has_cputotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cputotal(), output);
  }

  // optional int32 CpuRemaind = 4;
  if (has_cpuremaind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cpuremaind(), output);
  }

  // optional int32 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pid(), output);
  }

  // optional string CodePath = 6;
  if (has_codepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codepath().data(), this->codepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->codepath(), output);
  }

  // optional string IpAddress = 7;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ipaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:info.ExecuterUnit)
}

::google::protobuf::uint8* ExecuterUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:info.ExecuterUnit)
  // optional int32 MemoryTotal = 1;
  if (has_memorytotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->memorytotal(), target);
  }

  // optional int32 MemoryRemained = 2;
  if (has_memoryremained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->memoryremained(), target);
  }

  // optional int32 CpuTotal = 3;
  if (has_cputotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cputotal(), target);
  }

  // optional int32 CpuRemaind = 4;
  if (has_cpuremaind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cpuremaind(), target);
  }

  // optional int32 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pid(), target);
  }

  // optional string CodePath = 6;
  if (has_codepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codepath().data(), this->codepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->codepath(), target);
  }

  // optional string IpAddress = 7;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ipaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:info.ExecuterUnit)
  return target;
}

int ExecuterUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MemoryTotal = 1;
    if (has_memorytotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memorytotal());
    }

    // optional int32 MemoryRemained = 2;
    if (has_memoryremained()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memoryremained());
    }

    // optional int32 CpuTotal = 3;
    if (has_cputotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cputotal());
    }

    // optional int32 CpuRemaind = 4;
    if (has_cpuremaind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpuremaind());
    }

    // optional int32 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional string CodePath = 6;
    if (has_codepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codepath());
    }

    // optional string IpAddress = 7;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuterUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuterUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuterUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuterUnit::MergeFrom(const ExecuterUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memorytotal()) {
      set_memorytotal(from.memorytotal());
    }
    if (from.has_memoryremained()) {
      set_memoryremained(from.memoryremained());
    }
    if (from.has_cputotal()) {
      set_cputotal(from.cputotal());
    }
    if (from.has_cpuremaind()) {
      set_cpuremaind(from.cpuremaind());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_codepath()) {
      set_codepath(from.codepath());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuterUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuterUnit::CopyFrom(const ExecuterUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuterUnit::IsInitialized() const {

  return true;
}

void ExecuterUnit::Swap(ExecuterUnit* other) {
  if (other != this) {
    std::swap(memorytotal_, other->memorytotal_);
    std::swap(memoryremained_, other->memoryremained_);
    std::swap(cputotal_, other->cputotal_);
    std::swap(cpuremaind_, other->cpuremaind_);
    std::swap(pid_, other->pid_);
    std::swap(codepath_, other->codepath_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuterUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuterUnit_descriptor_;
  metadata.reflection = ExecuterUnit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace info

// @@protoc_insertion_point(global_scope)
